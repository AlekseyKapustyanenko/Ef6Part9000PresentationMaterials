using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using Core.DbModel;
using Core.DbModel.Models;
using Core.Dto;
using LinqKit;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Console;

namespace Core.LiveDemo1
{
    class Program
    {

        const int maxDiscountValue = 5;

        static void Main(string[] args)
        {

            var loggerFactory = LoggerFactory.Create((builder) =>
                builder
                    .AddFilter("Command", LogLevel.Information)
                    .AddConsole());
            var options = new DbContextOptionsBuilder<BookStoreContext>()
                .UseSqlServer(@"Server=DESKTOP-4ALAING;initial catalog=StoreDb;Integrated Security = true;")
                .UseLoggerFactory(loggerFactory) //Optional, this logs SQL generated by EF Core to the Console
                .Options;
            using (var context = new BookStoreContext(options))
            {

                context.Orders.ToList();
            }

            while (true)
            {
                Console.Write("Выбирете пример 1 - исходный, 2 - оптимизированный, 3 - NihFix.EfQueryCacheOptimizer: ");
                var number = Console.ReadLine();
                switch (number)
                {
                    case "1":
                    {
                        var stopwatch = Stopwatch.StartNew();
                        BadQuery(options);
                        stopwatch.Stop();
                        Console.WriteLine($"Исходный запрос выполнился за {stopwatch.ElapsedMilliseconds} мс");
                        break;
                    }
                    case "2":
                    {
                        var stopwatch = Stopwatch.StartNew();
                        GoodQuery(options);
                        stopwatch.Stop();
                        Console.WriteLine($"Оптимизированный запрос выполнился за {stopwatch.ElapsedMilliseconds} мс");
                        break;
                    }
                    case "3":
                    {
                        var stopwatch = Stopwatch.StartNew();
                        //var sql = TheBestQuery();
                        stopwatch.Stop();
                        Console.WriteLine($"NihFix.EfQueryCacheOptimizer {stopwatch.ElapsedMilliseconds} мс");
                        break;
                    }
                }
            }
        }

        static void BadQuery(DbContextOptions options)
        {
            var statusValues = new StatusEnum[] {StatusEnum.New, StatusEnum.Processed};
            using (var context = new BookStoreContext(options))
            {
                var ordersWithDiscountForBook = context.Orders
                    .Where(o => !o.IsDiscountOrder && o.OrderBooks
                                    .Any(ob => ob.Book.DiscountForBookId.HasValue &&
                                               ob.Book.DiscountForBook.DiscountValue > maxDiscountValue));

                var ordersWithCommonDiscounts =
                    context.Orders.Where(o => o.IsDiscountOrder && o.DiscountValue > maxDiscountValue);
                var concatQuery = ordersWithDiscountForBook.Concat(ordersWithCommonDiscounts);

                var mappedQuery = concatQuery.Select(o => new OrderDto
                {
                    Id = o.Id,
                    Notice = o.Notice,
                    Status = o.Status,
                    DiscountBooks =
                        o.OrderBooks
                            .Where(ob =>
                                ob.Order.IsDiscountOrder ||
                                (ob.Book.DiscountForBookId.HasValue &&
                                 ob.Book.DiscountForBook.DiscountValue > maxDiscountValue)).Select(ob => new BookDto
                            {
                                Id = ob.BookId,
                                Name = ob.Book.Name,
                                DiscountValue = o.IsDiscountOrder ? o.DiscountValue :
                                    ob.Book.DiscountForBookId.HasValue ? ob.Book.DiscountForBook.DiscountValue : 0
                            }),
                    SimpleBooks = o.OrderBooks
                        .Where(ob =>
                            !ob.Order.IsDiscountOrder &&
                            (!ob.Book.DiscountForBookId.HasValue || ob.Book.DiscountForBookId.HasValue &&
                             ob.Book.DiscountForBook.DiscountValue <= 5)).Select(ob => new BookDto
                        {
                            Id = ob.BookId,
                            Name = ob.Book.Name,
                            DiscountValue = o.IsDiscountOrder ? o.DiscountValue :
                                ob.Book.DiscountForBookId.HasValue ? ob.Book.DiscountForBook.DiscountValue : 0
                        }),

                });

                var filteredQuery = mappedQuery.Where(o => statusValues.Contains(o.Status));
                var result = filteredQuery.ToList();
            }
        }

        static void GoodQuery(DbContextOptions options)
        {
            var statusValues = new StatusEnum[] {StatusEnum.New, StatusEnum.Processed};
            var fiveValue = maxDiscountValue;
            var trueValue = true;
            var falseValue = false;
            var zeroValue = 0;
            using (var context = new BookStoreContext(options))
            {
                var ordersWithDiscountForBook = context.Orders
                    .Where(o => o.IsDiscountOrder == falseValue && o.OrderBooks
                                    .Any(ob => ob.Book.DiscountForBookId.HasValue &&
                                               ob.Book.DiscountForBook.DiscountValue > fiveValue));

                var ordersWithCommonDiscounts =
                    context.Orders.Where(o => o.IsDiscountOrder == trueValue && o.DiscountValue > fiveValue);
                var concatQuery = ordersWithDiscountForBook.Concat(ordersWithCommonDiscounts);

                var mappedQuery = concatQuery.Select(o => new OrderDto
                {
                    Id = o.Id,
                    Notice = o.Notice,
                    Status = o.Status,
                    DiscountBooks =
                        o.OrderBooks
                            .Where(ob =>
                                ob.Order.IsDiscountOrder == trueValue ||
                                (ob.Book.DiscountForBookId.HasValue &&
                                 ob.Book.DiscountForBook.DiscountValue > fiveValue)).Select(ob => new BookDto
                            {
                                Id = ob.BookId,
                                Name = ob.Book.Name,
                                DiscountValue = o.IsDiscountOrder == trueValue ? o.DiscountValue :
                                    ob.Book.DiscountForBookId.HasValue ? ob.Book.DiscountForBook.DiscountValue :
                                    zeroValue
                            }),
                    SimpleBooks = o.OrderBooks.Where(ob =>
                        ob.Order.IsDiscountOrder == falseValue &&
                        (!ob.Book.DiscountForBookId.HasValue || ob.Book.DiscountForBookId.HasValue &&
                         ob.Book.DiscountForBook.DiscountValue <= fiveValue)).Select(ob => new BookDto
                    {
                        Id = ob.BookId,
                        Name = ob.Book.Name,
                        DiscountValue = o.IsDiscountOrder == trueValue ? o.DiscountValue :
                            ob.Book.DiscountForBookId.HasValue ? ob.Book.DiscountForBook.DiscountValue : zeroValue
                    }),

                });
                var predicate = PredicateBuilder.False<OrderDto>();
                predicate = statusValues.Aggregate(predicate, (a, v) => a.Or(o => o.Status == v));
                var filteredQuery = mappedQuery.Where(predicate);
                var result = filteredQuery.ToList();
            }
        }
    

//        static string TheBestQuery()
//        {
//            var statusValues = new StatusEnum[] { StatusEnum.New, StatusEnum.Processed };
//            using (var context = new BookStoreContext())
//            {
//                var ordersWithDiscountForBook = context.Orders.AsCacheOptimizedQueriable()
//                    .Where(o => !o.IsDiscountOrder && o.OrderBooks
//                        .Any(ob => ob.Book.DiscountForBookId.HasValue && ob.Book.DiscountForBook.DiscountValue > maxDiscountValue));
//
//                var ordersWithCommonDiscounts = context.Orders.AsCacheOptimizedQueriable().Where(o => o.IsDiscountOrder && o.DiscountValue > maxDiscountValue);
//                var concatQuery = ordersWithDiscountForBook.Concat(ordersWithCommonDiscounts);
//
//                var mappedQuery = concatQuery.AsCacheOptimizedQueriable().Select(o => new OrderDto
//                {
//                    Id = o.Id,
//                    Notice = o.Notice,
//                    Status = o.Status,
//                    DiscountBooks =
//                     o.OrderBooks.Where(ob => ob.Order.IsDiscountOrder || (ob.Book.DiscountForBookId.HasValue && ob.Book.DiscountForBook.DiscountValue > maxDiscountValue)).Select(ob => new BookDto
//                     {
//                         Id = ob.BookId,
//                         Name = ob.Book.Name,
//                         DiscountValue = o.IsDiscountOrder ? o.DiscountValue : ob.Book.DiscountForBookId.HasValue ? ob.Book.DiscountForBook.DiscountValue : 0
//                     }),
//                    SimpleBooks = o.OrderBooks.Where(ob => !ob.Order.IsDiscountOrder && (!ob.Book.DiscountForBookId.HasValue || ob.Book.DiscountForBookId.HasValue && ob.Book.DiscountForBook.DiscountValue <= 5)).Select(ob => new BookDto
//                    {
//                        Id = ob.BookId,
//                        Name = ob.Book.Name,
//                        DiscountValue = o.IsDiscountOrder ? o.DiscountValue : ob.Book.DiscountForBookId.HasValue ? ob.Book.DiscountForBook.DiscountValue : 0
//                    }),
//
//                });
//
//                var filteredQuery = mappedQuery.Where(o => statusValues.Contains(o.Status));
//                var result = filteredQuery.ToList();
//                return ((DbQuery<OrderDto>)filteredQuery.AsQueryable()).Sql;
//            }
    }
}